package components

import "stats-agent/web/types"

templ UserMessage(msg types.ChatMessage) {
	<div class="flex justify-end">
		<div class="bg-slate-700 text-white rounded-2xl px-5 py-3 max-w-4xl shadow-lg hover:shadow-xl transition-shadow duration-200">
			<div class="font-semibold text-sm mb-1 opacity-90 font-display">You</div>
			<div class="font-sans text-sm text-white/90">{ msg.Content }</div>
		</div>
	</div>
}

templ UserMessageWithLoader(msg types.ChatMessage) {
	@UserMessage(msg)
	<div id={ "loading-" + msg.ID } class="sse-loader" data-session-id={ msg.SessionID } data-message-id={ msg.ID }>
		<div class="flex justify-start w-full">
			<div class="bg-white rounded-2xl px-5 py-3 w-full shadow-md border border-gray-100 hover:shadow-lg transition-shadow duration-200">
				<div class="font-semibold text-sm text-primary mb-1 font-display">Pocket Statistician</div>
				<div class="flex items-center space-x-2">
					<div class="h-2 w-2 bg-blue-400 rounded-full animate-bounce [animation-delay:-0.3s]"></div>
					<div class="h-2 w-2 bg-blue-400 rounded-full animate-bounce [animation-delay:-0.15s]"></div>
					<div class="h-2 w-2 bg-blue-400 rounded-full animate-bounce"></div>
					<span class="text-sm text-gray-500 ml-2">Thinking...</span>
				</div>
			</div>
		</div>
	</div>
}

templ AgentMessage(msg types.ChatMessage) {
	<div class="w-full">
		<div class="bg-white rounded-2xl px-5 py-3 w-full shadow-md border border-gray-100 hover:shadow-lg 
 
 duration-200">
			<div class="font-semibold text-sm text-primary mb-2 font-display">Pocket Statistician</div>
			<div class="prose max-w-none leading-relaxed text-gray-700 font-sans">
				@templ.Raw(msg.Rendered)
			</div>
		</div>
	</div>
}

// AgentMessageGroup renders a collection of agent/tool messages in a single block.
templ AgentMessageGroup(messages []types.ChatMessage) {
	if len(messages) > 0 {
		<div class="w-full">
			<div class="bg-white rounded-2xl px-5 py-3 w-full shadow-md border border-gray-100 hover:shadow-lg transition-shadow duration-200">
				<div class="font-semibold text-sm text-primary mb-2 font-display">Pocket Statistician</div>
				<div class="prose max-w-none leading-relaxed text-gray-700 font-sans">
					for _, msg := range messages {
						@templ.Raw(msg.Rendered)
					}
				</div>
				// On session reload, the rendered file blocks are part of the last message's HTML.
				// For live streaming, the JS will populate a target div.
				// This empty div ensures structure is consistent but won't be used on reload.
				<div id={ "file-container-agent-msg-" + messages[0].ID }></div>
			</div>
		</div>
	}
}