package utils

import (
	"path/filepath"
	"strings"
)

// FileType represents a categorized file type
type FileType string

const (
	FileTypeCSV   FileType = "csv"
	FileTypePDF   FileType = "pdf"
	FileTypeImage FileType = "image"
	FileTypeOther FileType = "other"
)

// FileInfo contains validation and categorization results
type FileInfo struct {
	Extension    string
	Type         FileType
	IsAllowed    bool // For uploads
	IsImage      bool
	IsRenderable bool // For display in chat
}

// AllowedUploadExtensions defines which file types can be uploaded
var AllowedUploadExtensions = map[string]bool{
	".csv":  true,
	".xlsx": true,
	".xls":  true,
	".pdf":  true,
}

// MaxFileSizes defines size limits per file type (in bytes)
var MaxFileSizes = map[FileType]int64{
	FileTypePDF: 10 * 1024 * 1024, // 10MB
	FileTypeCSV: 50 * 1024 * 1024, // 50MB (could be added later)
}

// GetFileInfo analyzes a filename and returns comprehensive file information
func GetFileInfo(filename string) FileInfo {
	ext := strings.ToLower(filepath.Ext(filename))

	info := FileInfo{
		Extension: ext,
	}

	// Determine file type and properties
	switch ext {
	case ".csv", ".xls", ".xlsx":
		info.Type = FileTypeCSV
		info.IsAllowed = true
		info.IsRenderable = true

	case ".pdf":
		info.Type = FileTypePDF
		info.IsAllowed = true
		info.IsRenderable = true

	case ".png", ".jpg", ".jpeg", ".gif":
		info.Type = FileTypeImage
		info.IsImage = true
		info.IsRenderable = true
		// Not allowed for upload (generated by Python only)

	default:
		info.Type = FileTypeOther
	}

	return info
}

// IsAllowedUpload checks if a file extension is allowed for upload
func IsAllowedUpload(filename string) bool {
	ext := strings.ToLower(filepath.Ext(filename))
	return AllowedUploadExtensions[ext]
}

// ValidateFileSize checks if a file size is within limits for its type
func ValidateFileSize(fileType FileType, size int64) bool {
	if maxSize, exists := MaxFileSizes[fileType]; exists {
		return size <= maxSize
	}
	return true // No limit defined
}
